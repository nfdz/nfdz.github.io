[{"content":"I promise that this story about books is not related to Lord of the Rings.\nI always liked to read tech books as a way to learn new things, progress, and change my point of view. That\u0026rsquo;s why today I decided to share something \u0026lsquo;random\u0026rsquo; like this. I have divided the post according to the state of reading.\nTwo books I have read Anything You Want by Derek Sivers We discover the story of this entrepreneur through an anecdotes format. These stories give us a lot of pieces of advice to achieve our goals. The book is a gem if you like this kind of story.\nSome sentences I liked:\nThe real point of doing anything is to be happy, so do only what makes you happy. Business is not about money. It’s about making dreams come true for others and for yourself. Success comes from persistently improving and inventing, not from persistently promoting what’s not working. When deciding whether to do something, if you feel anything less than ‘Wow! That would be amazing! Absolutely! Hell yeah!’ — then say ‘no’. Clean Code by Robert C. Martin aka “Uncle Bob” This is a must-read book of software engineering. It will change your way of seeing things, priorities, and way of understanding software. Put it first on your reading list.\nThe book is divided into three parts:\nIn the first part, it explains what the Clean Code is and how to get to it. In the second part, there are more complex examples of code refactoring in order to get Clean Code. The third part is a collection of ‘clues’ that help you find code that is not good enough and should be refactored. Two books I am reading Rework by Jason Fried and David Heinemeier The reading format is very interesting since it combines text with very nice letterings and schemes. I would like to cut them all to stick them on the wall but I will respect the integrity of the book, for now.\nRework provides information on how to improve your team, relationships, productivity, and work environment. People recommend it because it helps build better products, remove unnecessary tasks, save time, work with the right people, and have a clearer picture of business processes. Very ambitious.\nThe Design of Everyday Things by Donald Norman The book\u0026rsquo;s goal is to turn readers into great observers of the bad designs that are in many of the problems of modern life, technology especially. It also helps the reader to be observant of good design and how designers have worked to make our life simpler. A good design is much harder to see than a bad design because a good design fits our needs so well that it becomes invisible. However, a bad design is very noticeable.\nThe book provides, on the one hand, the fundamental principles that are required to create usable and understandable products, which provide satisfaction. On the other hand, it provides the principles to remove problems and find alternatives for those products that do not meet these requirements.\nTwo books I am going to read The Pragmatic Programmer by Andy Hunt and Dave Thomas This book is well-known and a lot of people have recommended it to me. I already have it and I am looking forward to starting with it.\nThe Clean Coder by Robert C. Martin I loved the Clean Code, so I do not think I need any more reasons to more Uncle Bob books. I know I will like it.\nAs you can see, I have not written a long summary or essay about the books. I think that there are a lot of very good summaries on the internet and I think it is not necessary. However, feel free to ask anything you want about them, any discussion is interesting. And\u0026hellip;\n\u0026hellip;Suggest me books!\nMy inbox is open to any recommendations, I will thank you a lot.\n","permalink":"https://nfdz.io/posts/2020/two-books/","summary":"I promise that this story about books is not related to Lord of the Rings.\nI always liked to read tech books as a way to learn new things, progress, and change my point of view. That\u0026rsquo;s why today I decided to share something \u0026lsquo;random\u0026rsquo; like this. I have divided the post according to the state of reading.\nTwo books I have read Anything You Want by Derek Sivers We discover the story of this entrepreneur through an anecdotes format.","title":"What am I reading?"},{"content":"Android application to manage events, users and loyalty of your club. It is easy to fork, modify and extend according to your needs.\nThe application was developed in Kotlin, using the native Android framework and common design patterns.\nFeatures Club events managed according to categories and dates. Confirmation of assistance through QR code. Loyalty of members through points system based on attendance at events. Alerts with notification push for administrators. Private club chat. It has push notifications. Setup Setup your Firebase project with your App Ids and Key hashes and copy your Firebase files google-services.json to adminApp and memberApp folder. Enable and install Firebase Functions. Functions are located in firebase_functions_src folder. Enable and setup Firebase Auth (email/password). You can customize messages about create account, restore password, etc. Enable administrators by creating their credentials manually in Firebase Auth and adding the email to a list in the Firebase Database. Replace YOUR.MEMBER.APP.ID.HERE and YOUR.ADMIN.APP.ID.HERE for your own ids. Replace in memberApp the Strings.xml file with your own content: app_name, club_about_content, club_contact_content, club_schedule_content, club_location_content, club_location_uri, club_location_uri_query, playlist_spotify_uri, club_facebook_url, club_facebook_url, event_url_host. Replace in adminApp the Strings.xml file with your own content: app_name. Replace in memberApp the drawable folder with your own content: image_logo_land, image_logo_square, image_club_location.webp (image of google maps with help to find your location). You can modify text and images of event categories. The categories are defined in EventCategory enum in commonLibrary project. String texts and drawables are referred from there. You can modify app colors in colors.xml files. Screenshots Conclusion The administration and members use the software daily in their smartphones and club totems.\nI have been able to improve my knowledge about Kotlin and Firebase.\nThe application is free software, GPLv3, you can see the code on GitHub and download the APK from the Releases page.\n","permalink":"https://nfdz.io/posts/2019/clubapp/","summary":"Android application to manage events, users and loyalty of your club. It is easy to fork, modify and extend according to your needs.\nThe application was developed in Kotlin, using the native Android framework and common design patterns.\nFeatures Club events managed according to categories and dates. Confirmation of assistance through QR code. Loyalty of members through points system based on attendance at events. Alerts with notification push for administrators. Private club chat.","title":"Club App"},{"content":"Android library for indoor and outdoor Wi-Fi navigation. On the one hand, it does not use the latest Wi-Fi navigation provided in the latest Android SDK versions, so the minimum version can remain low. It enables you to navigate in any kind of scenarios. On the other hand, the purpose is different from that new Wi-Fi navigation provided in the latest Android SDK.\nIt needs a preset of records from the different spots where you want to locate the user. There is a sample application to show how the library works and get records of the spots to use later inside your application.\nQuickstart The learning curve of this library is very fast, the classes and concepts with which you have to learn to work are the following:\nRecord LocationComparison FindoorRecorder FindoorProcessor Download If you use gradle, you just have to add the following in your build.gradle file:\n1 2 3 4 5 6 7 8 9 10 allprojects { repositories { ... maven { url \u0026#39;https://jitpack.io\u0026#39; } } } ... dependencies { implementation \u0026#39;com.github.nfdz:findoor:v1.0.1\u0026#39; } Jitpack works with several build systems, please checkout the documentation if you need help with yours.\nSample Application This app shows several uses cases of this library and it is totally functional. Feel free to use it as you need. For example, you could use this app in order to get records of location spots you need and serve or embed them in your production app.\nThe library is free software, Apache-2.0, and you can see the code on GitHub.\nDownload the application from the GitHub Releases of the repository.\n","permalink":"https://nfdz.io/posts/2018/findoor/","summary":"Android library for indoor and outdoor Wi-Fi navigation. On the one hand, it does not use the latest Wi-Fi navigation provided in the latest Android SDK versions, so the minimum version can remain low. It enables you to navigate in any kind of scenarios. On the other hand, the purpose is different from that new Wi-Fi navigation provided in the latest Android SDK.\nIt needs a preset of records from the different spots where you want to locate the user.","title":"Findoor"},{"content":"This project consist of a custom developed advertising stand for a local fair. The original idea was developed by a creative graphic designer and he delegated to me the technical aspects of the project. I count among my hobbies to play with Arduino and Raspberry Pi and I am always up to work close to the hardware.\nKey Features The taller, the better. The advertising stand must be seen anywhere in the fair and invite people to interact with it to get more information. The proposed design was:\nThe leafs are boxes illuminated with the brand logo on the side. The trunk is a huge television screen where the information is shown and the media played. A set of interactive pannels or buttons around the television/trunk with the brands on the side. Concept There are some technical challenges to implement the desired experience, so it is interesting to enumerate the requirements and defined the components of the tree to identify the roadmap. The specifications are:\nThe display should invite you to touch the panels in the standby mode. A video should loop calling the fair visitor to come and play. When someone touches a button, it must turn on its branded leaf-box and play the information video on the screen. It must also turn off the last illuminated leaf-box if there is one. There must be a safety margin between valid interactions in order to avoid changing videos repeatedly in short intervals. When the informational video is finished, the leaf-box must be turned off and the screen must come back to the standby mode. It must have an automatic mode, so if it is a long time without interactions it will start to illuminate the leaf-boxes and play informative videos automatically. The components used must fit the budget of the project since the tree is one more element of the stand and should not spend all the resources. The main components and boards must be redundant for the sake of availability. From a technical point of view, we iterated the specifications and propose the following implementation:\nA custom made wooden structure with boxes with the brands. This component requires carpentry and marketing work so we are not going to talk much here. A set of relays connected on one side to the powerful bulbs and an AC power supply, and on the other side to an Arduino board that will be the controller of the relay. Several touch panels connected to an Arduino board that will monitor the input. A large full HD television screen connected by HDMI to a Raspberry Pi board that will play the videos. Implementation The Board The Arduino board chosen as the controller was the MEGA version because the amount of digital inputs and outputs, this board has 54. I had already some Arduinos Uno and Leonardo at home so I was able to do experiments and demo the project things.\nThe chosen Raspberry Pi model was the Model B. This choice was just because I had some of them already and it met our requirements.\nThe prototype board was small enough to fit inside the \u0026lsquo;roots\u0026rsquo; of the tree.\nTouch Panels I used capacitive sensors that are well tested and proven. This component consists of a few resistors, capacitors, conductive material, and some tin. You can find more information about how it works at the official Arduino website.\nI used an open source library for the integration. For example, to define a sensor and read its input:\n1 2 3 4 5 6 7 CapacitiveSensor sensor = CapacitiveSensor(14, 15); ... long total = sensor.capacitiveSensor(30); if (total \u0026gt; SENSOR_THRESHOLD) { ... } Turn On The Light I used two eight channel DC 5V relay module to control the light at the high voltage circuit (220V). These relays are very common and reliable.\nOn the Arduino side, it was only necessary to control the output of a digital pin per relay. For example, to turn on the light of selectedBrand:\n1 digitalWrite(outputs[selectedBrand], HIGH); From Arduino To Raspberry Pi The communication between both platforms was done via a USB connection. When the Arduino turn on a leaf-box, it must send an order to the serial port. The Raspberry Pi must be listening and reading this port in a loop to process all the video playback orders that it receives.\nFor example, to send the order to play the information video of the brand with the ID 1.\n1 2 3 4 // Arduino Serial.begin(9600); ... Serial.print(\u0026#34;SELECT_1\\n\u0026#34;); 1 2 3 4 5 # Raspberry Pi ser = serial.Serial(usbPath, 9600) selection = ser.readline() if \u0026#34;SELECT_1\u0026#34; in selection: // ... Information Videos The Raspberry Pi application that plays the information videos by following the input of the Arduino was written in Python. I used the pyomxplayer player that it is a Python wrapper of omxplayer.\nFor example, to play the information video of the brand with the ID 1:\n1 2 3 4 5 6 7 8 def select_video(self, id): if self.selected == id: return; self.stop_omx() self.selected = id self.selectedTime = self.current_millis_time() self.start_omx(\u0026#39;/home/pi/Desktop/VIDEOS/VIDEO_\u0026#39; + id + \u0026#39;.mp4\u0026#39;) self.schedStandby(40) Conclusion The execution of this project was successful. Both the customer and my designer workmate were happy. Jobs involving software and hardware are very entertaining challenges to perform. I am delighted to work with Arduino and Raspberry Pi boards and I will do it again as soon as I have a chance.\n","permalink":"https://nfdz.io/posts/2018/interactive-tree/","summary":"This project consist of a custom developed advertising stand for a local fair. The original idea was developed by a creative graphic designer and he delegated to me the technical aspects of the project. I count among my hobbies to play with Arduino and Raspberry Pi and I am always up to work close to the hardware.\nKey Features The taller, the better. The advertising stand must be seen anywhere in the fair and invite people to interact with it to get more information.","title":"Interactive Tree Stand"},{"content":"The Android permissions system is powerful and it was an incredibly big advance compared to old Android verions. Applications usually ask for permissions in a context where they could be justified. However, why do apps keep this acquired permission forever? This question was the beginning of this project and summarize the concept very well. I was really missing this feature in Android, I looked for any application that would do something like this and I was not able to find anything.\nConcept The applications should show permissions changes (acquired) with a warning icon and alerts with a system notification as soon as possible (real time mode) or once a day (report mode). The philosophy was always the same, keep it simple as possible. I didn\u0026rsquo;t want to implement a complex application that only me could understand.\nThe views and system notifications navigates to app settings to change permissions quickly. It isn\u0026rsquo;t possible to change the permissions inside the application without a root user and I didn’t want to develop a root-only app.\nImplementation The MainActivity is the entry point of the application and shows all applications with permissions in a list view.\nThe DetailsActivity shows more information about the permissions that uses and could use selected application.\nThe SettingsActivity has several configuration options to use the application as the user wants. I had to develop custom preference components for some configuration options. The implementation of the preference fragment is from support library because it has compatibility with coordinator layout animations, it uses RecyclerView beneath.\nThe AnalysisJobIntentService handles the event of analyzing and reporting immediately using a system notification. This event is triggered from a shortcut action.\nFinally, the ReportJobService and the RealTimeJobService perform an analysis and notify only if there are changes. The main difference between them is the frequency of analysis. Both are implementations of the JobService from the Android SDK.\nModel–View–Presenter Pattern I recommend MVP pattern for simple applications with not very complex state management. For example, the contract for the main view is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public interface MainActivityContract { interface View { void bindViewToLiveData(LiveData\u0026gt; data); void navigateToAppDetails(ApplicationInfo app, ImageView appIcon); void filterContent(@Nullable String query); } interface Presenter { void initialize(Context context); void resume(); void destroy(); void onSyncSwipe(); void onIgnoreAppClick(ApplicationInfo app); void onAppClick(ApplicationInfo app, ImageView appIcon); void onShowSystemAppsFlagChanged(); void onSearchQueryChanged(@Nullable String query); } interface Model { void initialize(Context context); void destroy(); void launchSynchronization(); LiveData\u0026lt;RealmResults\u0026lt;ApplicationInfo\u0026gt;\u0026gt; loadDataAsync(); void toggleIgnoreFlag(ApplicationInfo app); } } From Realm to LiveData This project has been developed at a very good time, the Android architecture components library just came out. It makes Android common things much easier since you forget about the management of the state during all these life cycle and configuration events. Some common libraries do not work with it, so it was necessary to create a wrap for them. As you see below it is very simple:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public static \u0026lt;T extends RealmObject\u0026gt; LiveData\u0026lt;T\u0026gt; asLiveData(T result) { return new RealmObjectLiveData\u0026lt;\u0026gt;(result); } public static class RealmObjectLiveData\u0026lt;T extends RealmObject\u0026gt; extends LiveData\u0026lt;T\u0026gt; { private T object; private final RealmChangeListener\u0026lt;T\u0026gt; listener = new RealmChangeListener\u0026lt;T\u0026gt;() { @Override public void onChange(@NonNull T result) { setValue(result); } }; public RealmObjectLiveData(T object) { this.object = object; } @Override protected void onActive() { object.addChangeListener(listener); } @Override protected void onInactive() { object.removeChangeListener(listener); } } Dependencies The 3rd party software that I have used for the application is:\nButter Knife: Bind Android views and callbacks to fields and methods. Timber: A logger with a small, extensible API which provides utility on top of Android\u0026rsquo;s normal Log class. Realm: An open-source object database management system. Firebase Analytics: It is a cost-free app measurement solution that provides insight into app usage and user engagement. Activity analytics comes by default but you can log any analytics that you want. 1 firebaseAnalytics.logEvent(Analytics.Event.START_ANALYSIS, null); Firebase Crashlytics: It notifies detailed reports of the errors in the app. Runtime crash log comes by default but you can log exceptions and errors you think that are interesting. 1 2 FirebaseCrash.log(\u0026#34;OnIgnoreClick app invalid position: position=\u0026#34; + position + \u0026#34;, filteredData=\u0026#34; + (filteredData == null ? \u0026#34;null\u0026#34; : \u0026#34;\u0026#34;+filteredData.size())); Conclusion Anyone concerned about this problem can use this application to monitor the permissions we give to applications. Only because of this, the development has been worth the time.\nI have been able to improve my knowledge about the MVP pattern, the Firebase libraries and the integration of Realm with the Android architecture components.\nI don\u0026rsquo;t plan to add amazing features in the future, but feel free to contact me to suggest anything or report any bug.\nThe application is free software, GPLv3, you can see the code on GitHub and download the APK from the Releases page.\n","permalink":"https://nfdz.io/posts/2018/permissions-watcher/","summary":"The Android permissions system is powerful and it was an incredibly big advance compared to old Android verions. Applications usually ask for permissions in a context where they could be justified. However, why do apps keep this acquired permission forever? This question was the beginning of this project and summarize the concept very well. I was really missing this feature in Android, I looked for any application that would do something like this and I was not able to find anything.","title":"Permissions Watcher"},{"content":"Dependency inversion on Java and Android using the classic service locator pattern. For the development proccess of this project I have followed the Test-driven development (TDD) approach. I was very interested in creating a good set of tests to ensure that it works well in any case as it is a critical piece of the software architecture.\nThe library is free software (Apache-2.0) and you can see the code on GitHub.\nKey Features Easy to add and remove. Lazy creation. Thread safe. Testing friendly. Singleton. Releasable. Well tested. Quickstart Implement Dependency or SingletonDependency interface. Implement DependencyProvider that know how to create previous dependency. Supply these providers to the DependencyLocator in some point before use the dependencies, for instance at the entry point of your application. 1 DependencyLocator.provide(MyDependency.class, new MyDependencyProvider()); Locate this dependency where and when you want to use: 1 MyDependency dependency = (MyDependency)DependencyLocator.locate(MyDependency.class); Optional: Release this dependency when you do not need use it anymore: 1 DependencyLocator.release(dependency); Sample Project Check this sample project with three dependencies, one of them nested.\nDownload Jitpack If you use gradle, you just have to add the following in your build.gradle file:\n1 2 3 4 5 6 7 8 9 10 allprojects { repositories { ... maven { url \u0026#39;https://jitpack.io\u0026#39; } } } ... dependencies { compile \u0026#39;com.github.nfdz:DependencyLocator:v1.0.0\u0026#39; } Jitpack works with several build systems, please checkout the documentation if you need help with yours.\nManual JAR Download the JAR library from the GitHub Releases of the repository.\n","permalink":"https://nfdz.io/posts/2017/dependency-locator/","summary":"Dependency inversion on Java and Android using the classic service locator pattern. For the development proccess of this project I have followed the Test-driven development (TDD) approach. I was very interested in creating a good set of tests to ensure that it works well in any case as it is a critical piece of the software architecture.\nThe library is free software (Apache-2.0) and you can see the code on GitHub.","title":"Dependency Locator"},{"content":"This is a writing application without distractions and fuss, easy to use and tiny.\nKey Features Markdown support. Writing statistics: time, words count. Ambient music. Right to left support. Import and Export. Storage friendly. Favorite files. Search. Battery friendly. Markdown helper: H1, H2 and H3 Bold, italic and strikethrough Quote List (bulleted and numbered) Link Image and video (Youtube) Motivation I wanted to learn and use new patterns and libraries on Android. On the one hand I wanted to use the new Android Design Support Library.\nOn the other hand, I wanted to try the new Android Architecture Components. They are a new collection of libraries that help design robust, testable, and maintainable apps.\nWhen I saw the announcement on the Google I/O 2017 I was totally sure that I was going to try as soon as I could in my next project.\nFinally, I also wanted to include in the application a background music player since I had never worked with anything like that on Android.\nConcept It must implement all the required features in an intuitive and transparent way. elaborate a mockup to follow in its development.\nBefore the development, I have developed a sketch mockup to test the different features and the user experience.\nImplementation The MainActivity is the entry point of the application and shows all available documents in a grid. To do this, it uses a RecyclerView. There is a bottom toolbar that appears when any document is selected. It is possible to change the order and filter.\nThe EditDocActivity is where the user can edit a document and visualize its preview. The CustomEditText view has been used for editing. This class extends EditText and adds the functionality to add a listener to receive the selection change events. This was necessary to be able to offer a bottom toolbar with markdown format editing shortcuts.\nFor the preview has been used MarkdownView that is a view defined in a third-party library with the same name. It is very useful since it is easy to use and very powerful. It supports several markdown formats and nice CSS themes.\nThe cover of a document can be a flat color or a custom image. The EditDocCoverDialog implements this cover settings. It could be presented as a dialog or as a full screen fragment depending on the device.\nThe view of this dialog has two tabs. The first one shows the selected cover color and it can be modified using the Material Color Picker Dialog. The second one shows the selected cover image and it can be modified using File Picker Dialog. It is executed a post-selection process of the image to reduce and optimize it. It achieves it by using the Picasso and the Compressor libraries.\nThe MusicDialog shows a simple ambient music control. It is connected to the MusicService to retrieve playback information and to perform actions.\nThe MusicService is a bound service. It is responsible for managing the playback of the ambient music. It uses a MusicPlayer. The ambient music are pre-stored tracks to play in a loop. It is possible to interact with this service through intent actions and its bind interface.\nThe service manages and controls a notification while there is music playing. This notification has actions that use PendingIntent to control the playback.\nAndroid Architecture Components I used of Room for the data persistence. Room provides an abstraction layer over SQLite to allow fluent database access while taking advantage of the powerful SQLite. There is a Data Access Object (DAO) interface called DocumentDao. For example, it has this method to get a document:\n1 2 @Query(\u0026#34;SELECT * FROM \u0026#34; + TABLE_NAME + \u0026#34; WHERE \u0026#34; + COLUMN_ID + \u0026#34; = :docId\u0026#34;) DocumentEntity getDocument(long docId); There is an Entity class called DocumentEntity. It implements the Document interface from the domain and it has all attributes column names defined there. The DocumentMetadata class contains all attributes of DocumentEntity but the text of the document. This is useful in order to retrieve a list of documents avoiding loading in memory each document. Room deals with any class that it could match the column names with class attributes. For example, to get a document metadata the DocumentDao method is:\n1 2 3 4 5 6 7 8 9 10 11 12 @Query(\u0026#34;SELECT \u0026#34; + COLUMN_ID + \u0026#34;, \u0026#34; + COLUMN_NAME + \u0026#34;, \u0026#34; + COLUMN_WORKING_TIME + \u0026#34;, \u0026#34; + COLUMN_LAST_EDITION_TIME + \u0026#34;, \u0026#34; + COLUMN_WORDS + \u0026#34;, \u0026#34; + COLUMN_FAVORITE + \u0026#34;, \u0026#34; + COLUMN_COVER_COLOR + \u0026#34;, \u0026#34; + COLUMN_COVER_IMAGE + \u0026#34; FROM \u0026#34; + TABLE_NAME + \u0026#34; WHERE \u0026#34; + COLUMN_ID + \u0026#34; = :docId\u0026#34;) DocumentMetadata getDocumentMetadata(long docId); The database that stores this DAO is defined in the AppDatabase. It is singleton with the purpose of accessing and creating the database. The instance is created by using Room:\n1 sInstance = Room.databaseBuilder(context, AppDatabase.class, DATABASE_NAME).build(); The DocListViewModel, that extends the ViewModel class, manages the access of the data from the view classes attached to the Android life cycle. It offers a LiveData that contains a list of DocumentMetadata. In order to consume the DocListViewModel I had to do the following:\n1 2 3 4 5 6 7 DocListViewModel viewModel = ViewModelProviders.of(this).get(DocListViewModel.class); viewModel.getDocumentsMetadata().observe(this, new Observer\u0026gt;() { @Override public void onChanged(@Nullable List docs) { // do something ... } }); As you can see, it is no longer necessary to mess with AsyncTask to load the data asynchronously nor manual cache to avoid load the data again with configuration changes. These new components own that complexity in a transparent way.\nDependencies The 3rd party software that I have used for the application is:\nButter Knife: Bind Android views and callbacks to fields and methods. Timber: A logger with a small, extensible API which provides utility on top of Android\u0026rsquo;s normal Log class. Picasso: A powerful image downloading and caching library for Android. 1 2 3 4 5 6 7 8 Picasso.with(getActivity()) .load(new File(mImagePath)) .placeholder(R.drawable.image_placeholder) .memoryPolicy(MemoryPolicy.NO_CACHE) .resize(IMAGE_MAX_WIDTH_PX, IMAGE_MAX_HEIGHT_PX) .centerInside() .onlyScaleDown() .into(mImageView); Material Color Picker Dialog: A simple, minimalistic and beautiful dialog color picker. 1 2 3 4 5 6 7 8 9 10 11 final ColorPicker cp = new ColorPicker(getActivity(), Color.red(currentColor), Color.green(currentColor), Color.blue(currentColor)); cp.show(); cp.setCallback(new ColorPickerCallback() { @Override public void onColorChosen(@ColorInt int color) { // do something ... } }); FilePicker: A simple and minimalistic file picker dialog. 1 2 3 4 5 6 7 8 9 10 DialogProperties properties = new DialogProperties(); ... FilePickerDialog dialog = new FilePickerDialog(getActivity(), properties); dialog.setDialogSelectionListener(new DialogSelectionListener() { @Override public void onSelectedFilePaths(String[] files) { // do something ... } }); dialog.show(); Compressor: An Android image compression library. 1 2 3 4 5 6 7 File compressedImage = new Compressor(getActivity()) .setMaxWidth(IMAGE_MAX_WIDTH_PX) .setMaxHeight(IMAGE_MAX_HEIGHT_PX) .setQuality(IMAGE_QUALITY) .setCompressFormat(Bitmap.CompressFormat.JPEG) .setDestinationDirectoryPath(directory.getAbsolutePath()) .compressToFile(new File(image), name); MarkdownView: An Android library to display markdown text in a beautiful way. Conclusion Thanks to this project I have been able to learn a lot. I liked working with the new Android Architecture Components and in my opinion they have a great future ahead.\nThe result is very close to the initial mockup and most of the features are implemented. I think it meets the requirements and I hope it is useful.\nThe application is free software, GPLv3, you can see the code on GitHub and download the APK from the Releases page.\n","permalink":"https://nfdz.io/posts/2017/foco/","summary":"This is a writing application without distractions and fuss, easy to use and tiny.\nKey Features Markdown support. Writing statistics: time, words count. Ambient music. Right to left support. Import and Export. Storage friendly. Favorite files. Search. Battery friendly. Markdown helper: H1, H2 and H3 Bold, italic and strikethrough Quote List (bulleted and numbered) Link Image and video (Youtube) Motivation I wanted to learn and use new patterns and libraries on Android.","title":"Foco"}]